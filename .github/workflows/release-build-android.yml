name: Build Android and Upload Release APKs

on:
  release:
    types: [published]

jobs:
  android:
    name: Build Android and upload APKs
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Flutter (stable)
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          cache: true

      - name: Flutter version
        run: flutter --version

      - name: Fetch Flutter dependencies
        run: flutter pub get

      - name: Detect KEYSTORE_BASE64 presence
        id: detect_keystore
        shell: bash
        run: |
          if [[ -n "${{ secrets.KEYSTORE_BASE64 }}" ]]; then
            echo "has_keystore=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_keystore=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Download keystore
        if: steps.detect_keystore.outputs.has_keystore == 'true'
        shell: bash
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          set -euo pipefail
          mkdir -p android/app
          echo "$KEYSTORE_BASE64" | base64 -d > android/app/keystore.jks

      - name: Set signing environment variables
        if: steps.detect_keystore.outputs.has_keystore == 'true'
        shell: bash
        run: |
          cd android/app
          chmod 600 keystore.jks
          # Use absolute path from app directory
          echo "KEYSTORE_PATH=$(pwd)/keystore.jks" >> "$GITHUB_ENV"
          cd ../..
          echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> "$GITHUB_ENV"
          echo "KEY_ALIAS=${{ secrets.KEY_ALIAS }}" >> "$GITHUB_ENV"
          echo "KEY_PASSWORD=${{ secrets.KEY_PASSWORD }}" >> "$GITHUB_ENV"

      - name: Build split-per-ABI APKs
        shell: bash
        run: flutter build apk --release --split-per-abi

      - name: Build universal APK (all ABIs in one)
        shell: bash
        run: flutter build apk --release

      - name: Verify APKs were built
        shell: bash
        run: |
          echo "Checking for built APKs..."
          ls -lh build/app/outputs/flutter-apk/

      - name: Rename APKs and prepare dist
        shell: bash
        run: |
          set -e
          mkdir -p dist
          cp build/app/outputs/flutter-apk/app-arm64-v8a-release.apk dist/app-arm64-v8a-release.apk || true
          cp build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk dist/app-armeabi-v7a-release.apk || true
          cp build/app/outputs/flutter-apk/app-x86_64-release.apk dist/app-x86_64-release.apk || true
          cp build/app/outputs/flutter-apk/app-release.apk dist/app-universal-release.apk || true

      - name: Upload app-arm64-v8a-release.apk to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/app-arm64-v8a-release.apk
          asset_name: app-arm64-v8a-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload app-armeabi-v7a-release.apk to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/app-armeabi-v7a-release.apk
          asset_name: app-armeabi-v7a-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload app-x86_64-release.apk to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/app-x86_64-release.apk
          asset_name: app-x86_64-release.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload app-universal-release.apk to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: dist/app-universal-release.apk
          asset_name: app-universal-release.apk
          asset_content_type: application/vnd.android.package-archive
